{"remainingRequest":"D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\@ng-idle\\core\\src\\eventtargetinterruptsource.js","dependencies":[{"path":"D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\@ng-idle\\core\\src\\eventtargetinterruptsource.js","mtime":1522328033000},{"path":"D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522053638187},{"path":"D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/throttleTime';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/observable/merge';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { InterruptArgs } from './interruptargs';\r\nimport { InterruptSource } from './interruptsource';\r\nvar defaultThrottleDelay = 500;\r\n/*\r\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\r\n */\r\nvar /*\r\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\r\n */ EventTargetInterruptSource = (function (_super) {\r\n    __extends(EventTargetInterruptSource, _super);\r\n    function EventTargetInterruptSource(target, events, options) {\r\n        var _this = _super.call(this, null, null) || this;\r\n        _this.target = target;\r\n        _this.events = events;\r\n        _this.eventSubscription = new Subscription();\r\n        if (typeof options === 'number') {\r\n            options = { throttleDelay: options, passive: false };\r\n        }\r\n        options = options || { throttleDelay: defaultThrottleDelay, passive: false };\r\n        if (options.throttleDelay === undefined || options.throttleDelay === null) {\r\n            options.throttleDelay = defaultThrottleDelay;\r\n        }\r\n        _this.throttleDelay = options.throttleDelay;\r\n        _this.passive = !!options.passive;\r\n        var opts = _this.passive ? { passive: true } : null;\r\n        var fromEvents = events.split(' ').map(function (eventName) { return Observable.fromEvent(target, eventName, opts); });\r\n        _this.eventSrc = Observable.merge.apply(Observable, fromEvents);\r\n        _this.eventSrc = _this.eventSrc.filter(function (innerArgs) { return !_this.filterEvent(innerArgs); });\r\n        if (_this.throttleDelay > 0) {\r\n            _this.eventSrc = _this.eventSrc.throttleTime(_this.throttleDelay);\r\n        }\r\n        var handler = function (innerArgs) { return _this.onInterrupt.emit(new InterruptArgs(_this, innerArgs)); };\r\n        _this.attachFn = function () { return _this.eventSubscription = _this.eventSrc.subscribe(handler); };\r\n        _this.detachFn = function () { return _this.eventSubscription.unsubscribe(); };\r\n        return _this;\r\n    }\r\n    /*\r\n     * Checks to see if the event should be filtered. Always returns false unless overriden.\r\n     * @param event - The original event object.\r\n     * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n     */\r\n    /*\r\n       * Checks to see if the event should be filtered. Always returns false unless overriden.\r\n       * @param event - The original event object.\r\n       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n       */\r\n    EventTargetInterruptSource.prototype.filterEvent = /*\r\n       * Checks to see if the event should be filtered. Always returns false unless overriden.\r\n       * @param event - The original event object.\r\n       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n       */\r\n        function (event) {\r\n            return false;\r\n        };\r\n    Object.defineProperty(EventTargetInterruptSource.prototype, \"options\", {\r\n        /**\r\n         * Returns the current options being used.\r\n         * @return {EventTargetInterruptOptions} The current option values.\r\n         */\r\n        get: /**\r\n           * Returns the current options being used.\r\n           * @return {EventTargetInterruptOptions} The current option values.\r\n           */ function () {\r\n            return { throttleDelay: this.throttleDelay, passive: this.passive };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return EventTargetInterruptSource;\r\n}(InterruptSource));\r\n/*\r\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\r\n */\r\nexport { EventTargetInterruptSource };\r\n//# sourceMappingURL=eventtargetinterruptsource.js.map \r\n",null]}