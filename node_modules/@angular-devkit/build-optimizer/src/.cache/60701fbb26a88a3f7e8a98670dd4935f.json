{"remainingRequest":"D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\@ng-idle\\core\\src\\storageinterruptsource.js","dependencies":[{"path":"D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\@ng-idle\\core\\src\\storageinterruptsource.js","mtime":1522328033000},{"path":"D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522053638187},{"path":"D:\\SVNProjects\\thingbluangular5svnv1\\thingblusvn\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { WindowInterruptSource } from './windowinterruptsource';\r\n/*\r\n * An interrupt source on the storage event of Window.\r\n */\r\nvar /*\r\n * An interrupt source on the storage event of Window.\r\n */ StorageInterruptSource = (function (_super) {\r\n    __extends(StorageInterruptSource, _super);\r\n    function StorageInterruptSource(throttleDelay) {\r\n        if (throttleDelay === void 0) {\r\n            throttleDelay = 500;\r\n        }\r\n        return _super.call(this, 'storage', throttleDelay) || this;\r\n    }\r\n    /*\r\n     * Checks to see if the event should be filtered.\r\n     * @param event - The original event object.\r\n     * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n     */\r\n    /*\r\n       * Checks to see if the event should be filtered.\r\n       * @param event - The original event object.\r\n       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n       */\r\n    StorageInterruptSource.prototype.filterEvent = /*\r\n       * Checks to see if the event should be filtered.\r\n       * @param event - The original event object.\r\n       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n       */\r\n        function (event) {\r\n            if (event.key.indexOf('ng2Idle.') >= 0 && event.key.indexOf('.expiry') >= 0) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n    return StorageInterruptSource;\r\n}(WindowInterruptSource));\r\n/*\r\n * An interrupt source on the storage event of Window.\r\n */\r\nexport { StorageInterruptSource };\r\n//# sourceMappingURL=storageinterruptsource.js.map \r\n",null]}